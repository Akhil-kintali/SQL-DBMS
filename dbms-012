Problem Statement
A Student has name, age, score and student_id attributes, Where student_id value is unique for each student object.
Student class for the above mentioned details:
class Student:
    def __init__(self, name, age, score):
        self.name = name
        self.student_id = None
        self.age = age
        self.score = score
    ...
Queries :
1. Implement get method as mentioned in the above description. get method is used to retrieve a student from the database for a give condition and returns a Student object with the details retrieved from the database.

Data in Table
student_id	name	age	score
1	Raj	20	100
2	Vivek	21	90
3	Roshan	19	100

Example
>>> student_object = Student.get(student_id=1)
>>> student_object.student_id
1
>>> student_object.name
Raj
>>> student_object.age
20
>>> student_object.score
100
* If there are no results that match the given condition, get() should raise DoesNotExist exception.
#
Example
>>> student_object = Student.get(student_id=100)
DoesNotExist:
...

* If there are more than one student that match the given condition, get() should raise MultipleObjectsReturned exception.
Example
>>> student_object = Student.get(score=100)
MultipleObjectsReturned:
...

* It should raise an InvalidField if you are trying to fetch student details using fields other than student_id, name, age and score.
Example
>>> student_object = Student.get(some_random_field=100)
InvalidField:
...

2. Used to delete the given object from the database
#
Data in Table
student_id	name	age	score
1	Raj	20	100
2	Vivek	21	90
3	Roshan	19	100
#
Example
>>> student_object = Student.get(student_id=1)
>>> student_object.delete()

3. save method creates or updates a student object in database
#
Data in Table
student_id	name	age	score
1	Raj	20	100
2	Vivek	21	90
3	Roshan	19	100
#
Example
>>> student_object = Student.get(student_id=1)
>>> student_object.name = "Suresh"
>>> student_object.save()

•	If you have noticed name of the entry in student table with student_id=1 is updated.

4. create method can be used to create a new entry in the database.
#
Example
>>> student_object = Student(name="Rajini", age=19, score=95)
>>> student_object.save()
#
Data in Table
student_id	name	age	score
1	Suresh	20	100
2	Vivek	21	90
3	Roshan	19	100
4	Rajini	19	95
* 	•	If you have noticed, a new entry in student table has been created.
* Saving and already existing object in database shouldn't create a new entry in database.
#
Example
>>> student_object = Student.get(student_id=4)
>>> student_object.save()
* The above code doesn't create an entry in the database.
#
Learning Material
* Sample python snippets to execute SQL queries.
def write_data(sql_query):
	import sqlite3
	connection = sqlite3.connect("db.sqlite3")
	crsr = connection.cursor() 
	crsr.execute("PRAGMA foreign_keys=on;") 
	crsr.execute(sql_query) 
	connection.commit() 
	connection.close()

def read_data(sql_query):
	import sqlite3
	connection = sqlite3.connect("db.sqlite3")
	crsr = connection.cursor() 
	crsr.execute(sql_query) 
	ans= crsr.fetchall()  
	connection.close() 
	return ans

* Reference to access sqlite3 database using python.
Note: Test cases for your submissions are executed on students.sqlite3 database with Student table created using the below SQL query.
CREATE TABLE Student (
    student_id INTEGER PRIMARY KEY AUTOINCREMENT,
    name VARCHAR(250),
    age INT,
    score INT
);
Learn defining custom exceptions in Python in this reference

Solutions :

class DoesNotExist(Exception):
    pass
class MultipleObjectsReturned(Exception):
    pass
class InvalidField(Exception):
    pass

class Student:
    def __init__(self,name,age,score):
        self.name=name
        self.age=age
        self.score=score
        self.student_id=None
    
    @staticmethod
    def get(student_id=None,name=None,age=None,score=None,**kwargs):
        if student_id!=None:
            Q='SELECT * FROM Student WHERE student_id={}'.format(student_id)
        elif name!=None:
            Q='SELECT * FROM Student WHERE name="{}"'.format(name)
        elif age!=None:
            Q='SELECT * FROM Student WHERE age={}'.format(age)
        elif score!=None:
            Q='SELECT * FROM Student WHERE score={}'.format(score)
        else:
            raise InvalidField
        P=read_data(Q)
        if len(P)==0:
            raise DoesNotExist
        elif len(P)>1:
            raise MultipleObjectsReturned
        else:
            output=Student(P[0][1],P[0][2],P[0][3])
            output.student_id=P[0][0]
            return output
            
    def delete(self):
        Q='DELETE FROM Student WHERE student_id={}'.format(self.student_id)
        write_data(Q)
        
    def save(self):
        import sqlite3
        connection=sqlite3.connect("students.sqlite3")
        crsr=connection.cursor()
        crsr.execute("PRAGMA foreign_keys=on;")
        if self.student_id==None:
            Q=f'INSERT into Student(name,age,score) values("{self.name}",{self.age},{self.score})'
            crsr.execute(Q)
            self.student_id=crsr.lastrowid
        elif "select {} from student where student_id not in(select student_id from student)".format(self.student_id):
            Q="insert or replace into student(student_id,name,age,score) values({},'{}',{},{})".format(self.student_id,self.name,self.age,self.score)
            crsr.execute(Q)
            self.student_id=crsr.lastrowid
        else:
            Q=f'UPDATE Student set name="{self.name}",age={self.age},score={self.score} WHERE student_id={self.student_id}'
            crsr.execute(Q)
        connection.commit()
        connection.close()
    
def read_data(sql_query):
	import sqlite3
	connection = sqlite3.connect("students.sqlite3")
	crsr = connection.cursor() 
	crsr.execute(sql_query) 
	ans= crsr.fetchall()  
	connection.close() 
	return ans

def write_data(sql_query):
	import sqlite3
	connection = sqlite3.connect("students.sqlite3")
	crsr = connection.cursor() 
	crsr.execute("PRAGMA foreign_keys=on;") 
	crsr.execute(sql_query) 
	connection.commit() 
	connection.close()
